{"version":3,"sources":["assets/fit_logo.png","logo.svg","components/FitstackProfile.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GET_OPTIONS","decrypt","PUT_OPTIONS","encrypt","FitstackProfile","props","state","weightLogs","loading","run","inputDate","inputUnits","inputWeight","stepIndex","steps","target","content","getLogFile","handleChange","e","setState","name","value","handleJoyrideCallback","data","action","index","status","type","EVENTS","STEP_AFTER","TARGET_NOT_FOUND","includes","ACTIONS","PREV","STATUS","FINISHED","SKIPPED","console","groupCollapsed","log","groupEnd","bind","handleDateChange","saveWeight","deleteList","this","listWeight","self","userSession","profile","person","blockstack","getFile","then","fileContents","JSON","parse","length","event","preventDefault","parseInt","isNaN","alert","weights","weight","date","units","putFile","stringify","clearInputs","deleteFile","pop","document","getElementById","style","display","innerHTML","map","Date","toISOString","split","points","max","forEach","w","d","u","push","Math","callback","continuous","getHelpers","scrollToFirstStep","showProgress","showSkipButton","styles","options","zIndex","id","className","src","logo","legend","min","messages","empty","ytitle","xtitle","row","i","key","Form","Control","onChange","placeholder","placeholderText","selected","Group","controlId","as","componentClass","onClick","Component","appConfig","Home","isUserSignedIn","loadUserData","showProfile","isSignInPending","handlePendingSignIn","userData","window","location","origin","verticalAlign","redirectToSignIn","signUserOut","href","signout","signin","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b1fdb14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fit_logo.37e6fc94.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\"\nimport * as blockstack from \"blockstack\"\nimport Joyride, { ACTIONS, EVENTS, STATUS } from \"react-joyride\"\nimport DatePicker from \"react-datepicker\"\nimport { Form } from \"react-bootstrap\"\nimport { LineChart } from \"react-chartkick\"\n\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport logo from \"./../assets/fit_logo.png\"\nimport \"chart.js\"\n\nconst GET_OPTIONS = {\n  decrypt: true\n}\n\nconst PUT_OPTIONS = {\n  encrypt: true\n}\n\nexport default class FitstackProfile extends Component {\n  state = {\n    weightLogs: [],\n    loading: true,\n    run: false,\n    inputDate: '',\n    inputUnits: 'lb',\n    inputWeight: '',\n    stepIndex: 0, // a controlled tour\n    steps: [\n      {\n        target: \".dash-header-text\",\n        content:\n          \"Welcome to the Fitness Stack weight tracker! This app allows you to securely track and share your weight loss achievements with friends.\"\n      },\n      {\n        target: \".dash-entry\",\n        content: \"New weight logs can be added from the bottom input here.\"\n      },\n      {\n        target: \".dash-add\",\n        content:\n          \"Adding an entry appends it to your existing ledger, managed by Blockstack's decentralized and permissioned network.\"\n      },\n      {\n        target: \".dash-delete\",\n        content:\n          \"Deleting the table is irreversible and remove all entries from your ledger. Only use this if you are certain you want to start over!\"\n      },\n      {\n        target: \".dash-chart\",\n        content:\n          \"We'll automatically plot your data over time as you add weight entries.\"\n      },\n      {\n        target: \".dash-logout\",\n        content:\n          \"Logging out won't remove your data. It'll be saved so your can see it, save it, or make a new entry, the next time you visit!\"\n      }\n    ],\n  }\n\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleDateChange = this.handleDateChange.bind(this)\n    this.saveWeight = this.saveWeight.bind(this)\n    this.deleteList = this.deleteList.bind(this)\n  }\n\n  componentDidMount() {\n    this.listWeight()\n  }\n\n  getLogFile = () => 'logs.json'\n\n  handleDateChange(inputDate) {\n    this.setState({inputDate})\n  }\n\n  listWeight() {\n    const self = this\n    const { userSession, profile } = this.props\n    let person = new blockstack.Person(profile)\n    console.log(\"profile\", person)\n\n    userSession.getFile(self.getLogFile(), GET_OPTIONS).then(fileContents => {\n      const weightLogs = JSON.parse(fileContents || \"[]\")\n      console.log(\"fileContents of listWeight\", fileContents)\n      console.log(\"weights in listWeight\", weightLogs)\n      // set the tutorial to run if no logs are present.\n      self.setState({ weightLogs, loading: false, run: weightLogs.length === 0 })\n    })\n  }\n\n  saveWeight(event) {\n    event.preventDefault()\n    const self = this\n    const { userSession } = this.props\n    let { inputDate, inputWeight, inputUnits } = this.state\n    console.log(this.state)\n    if (!inputDate || !inputWeight || !inputUnits) {\n      alert('Weight, date, and units must all be specified to save record.')\n      return\n    }\n\n    inputWeight = parseInt(inputWeight)\n\n    if (isNaN(inputWeight) || inputWeight <= 0) {\n      alert('Input weight must be positive')\n      return\n    }\n\n    userSession.getFile(self.getLogFile(), GET_OPTIONS).then(fileContents => {\n        // get the contents of the file /weights.txt\n        const weights = JSON.parse(fileContents || \"[]\")\n        console.log(\"old weights in saveWeight\", weights)\n        const weightLogs = [\n          ...weights,\n          {\n            weight: inputWeight,\n            date: inputDate,\n            units: inputUnits\n          }\n        ]\n        console.log(\"weight to be saved\", weightLogs)\n        userSession.putFile(self.getLogFile(), JSON.stringify(weightLogs), PUT_OPTIONS).then(() => {\n          self.setState({weightLogs})\n          self.clearInputs()\n        })\n      })\n  }\n\n  clearInputs() {\n    this.setState({\n      inputDate: '',\n      inputWeight: '',\n      inputUnits: 'lb'\n    })\n  }\n\n  deleteList(event) {\n    const { userSession } = this.props\n    event.preventDefault()\n    userSession.deleteFile(this.getLogFile()).then(() => {\n      this.listWeight()\n    })\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  deleteLastItem() {\n    const { userSession } = this.props\n    const self = this\n    userSession.getFile(self.getLogFile(), GET_OPTIONS).then(fileContents => {\n      const weights = JSON.parse(fileContents || \"[]\")\n      if (weights.length > 1) {\n        weights.pop()\n        console.log(\"after deleting last item\", weights)\n\n        userSession.putFile(self.getLogFile(), JSON.stringify(weights), PUT_OPTIONS).then(() => {\n          self.listWeight(userSession)\n        })\n      } else if (weights.length === 1) {\n        document.getElementById(\"weights\").style.display = \"none\"\n        document.getElementById(\"weight-body\").innerHTML = \"\"\n        userSession.putFile(self.getLogFile(), [], { decrypt: false }).then(() => {\n          self.listWeight(userSession)\n        })\n      }\n    })\n  }\n\n  handleJoyrideCallback = data => {\n    const { action, index, status, type } = data\n\n    if ([EVENTS.STEP_AFTER, EVENTS.TARGET_NOT_FOUND].includes(type)) {\n      // Update state to advance the tour\n      this.setState({ stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) })\n    } else if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {\n      // Need to set our running state to false, so we can restart if we click start again.\n      this.setState({ run: false })\n    }\n\n    console.groupCollapsed(type)\n    console.log(data) //eslint-disable-line no-console\n    console.groupEnd()\n  }\n\n  render() {\n    const { profile } = this.props\n    let { weightLogs, run, stepIndex, inputDate, inputWeight, inputUnits, steps } = this.state\n    weightLogs = weightLogs.map(log => {\n      log.date = (new Date(log.date)).toISOString().split('T')[0]\n      return log\n    })\n\n    let data = []\n    let units = \"\"\n    if (weightLogs && weightLogs.length > 0) {\n      let points = []\n      let max = 0\n\n      units = weightLogs[0][\"units\"]\n\n      weightLogs.forEach(log => {\n        let w = log.weight\n        const d = log.date\n        const u = log.units\n        if (u != units) {\n          if (u === 'kg') {\n            w *= 2.2\n          } else if (u === 'lb') {\n            w /= 2.2 \n          }\n        }\n        w = parseInt(w)\n        if (w && d) {\n          points.push([d, w])\n          max = Math.max(max, w)\n        }\n      })\n\n\n\n      data = {\n        name: `Weight (${units})`,\n        data: points,\n        max: max\n      }\n    }\n\n    return (\n      <div>\n        <Joyride\n          callback={this.handleJoyrideCallback}\n          continuous={true}\n          getHelpers={this.getHelpers}\n          run={run}\n          scrollToFirstStep={true}\n          showProgress={true}\n          showSkipButton={true}\n          stepIndex={stepIndex}\n          steps={steps}\n          styles={{\n            options: {\n              zIndex: 10000\n            }\n          }}\n        />\n        <div id=\"crypto-container\">\n          <div className=\"panel-landing\" id=\"crypto\">\n            <div className=\"dash-header\">\n              <img className=\"dash-logo\" src={logo} />\n              <span className=\"dash-header-text\">Weight Tracker</span>\n            </div>\n            <div className=\"dash-chart\">\n              <LineChart\n                legend={false}\n                min={0}\n                max={data['max']}\n                data={data['data']}\n                messages={{ empty: \"Enter your first data point below!\" }}\n                ytitle={units}\n                xtitle=\"Date\"\n              />\n            </div>\n\n            {/* Show existing data if present */}\n            {weightLogs && weightLogs.length > 0 && (\n              <div id=\"weights\">\n                <table className=\"table dash-table\">\n                  <thead className=\"thead-dark\">\n                    <tr>\n                      <th>Weight</th>\n                      <th>Date</th>\n                      <th>Units</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {weightLogs.map((row, i) => {\n                      return <tr key={i}>\n                        <td>{row.weight}</td>\n                        <td>{row.date}</td>\n                        <td>{row.units}</td>\n                      </tr>\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n\n            <hr />\n\n            <p className=\"dash-add-prompt\">-<br/>Add a new weight recording:</p>\n            <table className=\"weight-table dash-entry\">\n              <tbody id=\"weight-body\">\n                <tr>\n                  <td>\n                    <div className=\"input-group mb-3\">\n                    <Form.Control \n                      value={inputWeight}\n                      onChange={this.handleChange} \n                      name='inputWeight' \n                      type=\"number\" \n                      placeholder=\"Enter weight\" \n                    />\n                    </div>\n                  </td>\n                  <td>\n                    <div className=\"input-group mb-3\">\n                      <DatePicker\n                        className=\"date-picker\"\n                        placeholderText=\"Enter date\"\n                        selected={inputDate}\n                        onChange={this.handleDateChange}\n                      />\n                    </div>\n                  </td>\n                  <td>\n                    <div className=\"input-group input-units-group mb-3\">\n                      <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Control\n                          as=\"select\"\n                          name=\"inputUnits\"\n                          value={inputUnits}\n                          componentClass=\"select\"\n                          onChange={this.handleChange}>\n                          <option>lb</option>\n                          <option>kg</option>\n                        </Form.Control>\n                      </Form.Group>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n\n            \n          </div>\n        </div>\n        <div id=\"deleteWeights\">\n          <div className=\"btn btn-primary dash-add\" id=\"save-weight\" onClick={this.saveWeight}>\n            Add weight log\n          </div>\n          &nbsp;\n          <div className=\"btn btn-primary dash-delete\" id=\"delete-button\" onClick={this.deleteList}>\n            Delete all\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\"\nimport * as blockstack from \"blockstack\"\nimport FitstackProfile from \"./FitstackProfile\";\n\nimport logo from './../assets/fit_logo.png'\n\nconst appConfig = new blockstack.AppConfig(['store_write', 'publish_data','email'])\nconst userSession = new blockstack.UserSession({ appConfig })\n\nexport default class Home extends Component {\n\n  state = {\n    profile: null \n  }\n\n  componentDidMount() {\n    if (userSession.isUserSignedIn()) {\n      const profile = userSession.loadUserData().profile\n      this.setState({profile})\n      this.showProfile(profile)\n     \n    } else if (userSession.isSignInPending()) {\n      userSession.handlePendingSignIn().then(userData => {\n        window.location = window.location.origin\n      })\n    }\n  }\n\n  showProfile(profile) {\n    document.getElementById(\"section-1\").style.display = \"none\"\n    document.getElementById(\"section-2\").style.display = \"block\"\n    document.getElementById(\"site-wrapper-inner\").style.verticalAlign = \"top\"\n  }\n\n  signin(event) {\n    event.preventDefault()\n    userSession.redirectToSignIn()\n  }\n\n  signout(event) {\n    event.preventDefault()\n    userSession.signUserOut()\n    window.location = window.location.origin\n  }\n\n  render() {\n    const { profile } = this.state\n\n    return (\n      <div>\n        <div className=\"panel-welcome hide\" id=\"section-2\">\n          <p className=\"lead\">\n            <a\n              href=\"#\"\n              className=\"btn btn-primary btn-lg dash-logout\"\n              id=\"signout-button\"\n              onClick={this.signout}>\n              Logout\n            </a>\n          </p>\n        </div>\n        <div className=\"site-wrapper\">\n          <div className=\"site-wrapper-inner\" id=\"site-wrapper-inner\">\n            <div className=\"panel-landing\" id=\"section-1\">\n              {/* <h1 className=\"landing-heading\">Fitness Stack</h1> */}\n              <img className='landing-logo' src={logo}/>\n              <p className=\"lead\">\n                <a\n                  href=\"#\"\n                  className=\"btn btn-primary btn-lg\"\n                  id=\"signin-button\"\n                  onClick={this.signin}\n                >\n                  Sign In with Blockstack\n                </a>\n              </p>\n            </div>\n            {!profile && <div>\n              <img src=\"https://i.giphy.com/media/26BRq9PYFLeJl3WLu/giphy.webp\" />\n              <p className='landing-slogan-text'>Share and record your weight loss progress, backed by <a href=\"https://blockstack.org\" target=\"_blank\">Blockstack</a> decentralized storage.</p>\n            </div>}\n            <div>\n              {profile && <FitstackProfile profile={profile} userSession={userSession}/>}\n            </div>\n           </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from \"react\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\nimport Home from \"./components/Home\"\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}